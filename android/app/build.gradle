plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id 'com.google.gms.google-services' apply false
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "org.globallearninglab.gll"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                println "=== DEBUG: Loading keystore properties ==="
                println "Key properties file exists: ${keystorePropertiesFile.exists()}"
                println "Key properties file path: ${keystorePropertiesFile.absolutePath}"
                println "StoreFile value: '${keystoreProperties['storeFile']}'"
                println "KeyAlias value: '${keystoreProperties['keyAlias']}'"
                println "Resolved store file path: ${file(keystoreProperties['storeFile']).absolutePath}"
                println "Store file exists: ${file(keystoreProperties['storeFile']).exists()}"

                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            } else {
                println "=== ERROR: key.properties file NOT FOUND ==="
                println "Looking for: ${keystorePropertiesFile.absolutePath}"
            }
        }
    }

    defaultConfig {
        multiDexEnabled true
        applicationId "org.globallearninglab.gll"
        minSdk = 25  // Your custom minSdk
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName

        // Support for 16 KB page sizes
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
        }
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
        texture {
            enableSplit = true
        }
    }

    // CORRECTED: Change to true for 16KB page support
    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            // CORRECTED: Use FULL or remove this block entirely
            ndk {
                debugSymbolLevel 'FULL'
            }
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:32.8.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'androidx.multidex:multidex:2.0.1'
}

flutter {
    source = "../.."
}

// Apply google services at the end
apply plugin: 'com.google.gms.google-services'